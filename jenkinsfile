node {
  try {
    slackSend channel: '#jenkins_noti', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} Start Build Image", teamDomain: 'k8sproject5', tokenCredentialId: 'slack-token'
    stage('Clone repository') {
      sh 'cd /var/lib/jenkins/workspace/Jenkins_to_ECR'
      sh 'rm -rf *'
      checkout scm
      slackSend channel: '#jenkins_noti', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} Cloning done", teamDomain: 'k8sproject5', tokenCredentialId: 'slack-token'
    }
    stage('[Build/Push] Frontend') {
      frontend_app = docker.build("525348550799.dkr.ecr.ap-southeast-1.amazonaws.com/react-frontend:${BUILD_NUMBER}", "-f ./frontend/Dockerfile ./frontend")
      docker.withRegistry('https://525348550799.dkr.ecr.ap-southeast-1.amazonaws.com', 'ecr:ap-southeast-1:jenkins_to_ecr_key') {
      frontend_app.push()
     }
      sh "docker rmi -f \$(docker images -q)"
      slackSend channel: '#cicd', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} Frontend => Build/Push", teamDomain: 'k8sproject5', tokenCredentialId: 'kakaonibs-slack'
    }
    
    stage('[Build/Push] plate-detection') {
      plate_detection_app = docker.build("525348550799.dkr.ecr.ap-southeast-1.amazonaws.com/plate-detection:${BUILD_NUMBER}", "-f ./car_license_detection/Dockerfile ./car_license_detection")
      docker.withRegistry('https://525348550799.dkr.ecr.ap-southeast-1.amazonaws.com', 'ecr:ap-southeast-1:jenkins_to_ecr_key') {
      plate_detection_app.push()
        }
      sh "docker rmi -f \$(docker images -q)"
      slackSend channel: '#cicd', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} plate-detection => Build/Push", teamDomain: 'k8sproject5', tokenCredentialId: 'kakaonibs-slack'
    }
  
    stage('[Build/Push] pose-estimation') {
      pose_estimation_app = docker.build("525348550799.dkr.ecr.ap-southeast-1.amazonaws.com/pose-estimation:${BUILD_NUMBER}", "-f ./pose_estimation/Dockerfile ./pose_estimation")
      docker.withRegistry('https://525348550799.dkr.ecr.ap-southeast-1.amazonaws.com', 'ecr:ap-southeast-1:jenkins_to_ecr_key') {
      pose_estimation_app.push()
         }
      sh "docker rmi -f \$(docker images -q)"
      slackSend channel: '#cicd', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} pose-estimation => Build/Push", teamDomain: 'k8sproject5', tokenCredentialId: 'kakaonibs-slack'
    }

    stage('[Build/Push] yolov5_object_detection') {
      yolov5_object_detection_app = docker.build("525348550799.dkr.ecr.ap-southeast-1.amazonaws.com/yolov5-detection:${BUILD_NUMBER}", "-f ./yolov5_object_detection/Dockerfile ./yolov5_object_detection")
      docker.withRegistry('https://525348550799.dkr.ecr.ap-southeast-1.amazonaws.com', 'ecr:ap-southeast-1:jenkins_to_ecr_key') {
      yolov5_object_detection_app.push()
      
      }
      sh "docker rmi -f \$(docker images -q)"
      slackSend channel: '#cicd', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} yolov5_object_detection => Build/Push", teamDomain: 'k8sproject5', tokenCredentialId: 'kakaonibs-slack'
    }

    stage('[Build/Push] Image_classfication') {
      Image_classfication_app = docker.build("525348550799.dkr.ecr.ap-southeast-1.amazonaws.com/image-classification:${BUILD_NUMBER}", "-f ./Image_classfication/Dockerfile ./Image_classfication")
      docker.withRegistry('https://525348550799.dkr.ecr.ap-southeast-1.amazonaws.com', 'ecr:ap-southeast-1:jenkins_to_ecr_key') {
      Image_classfication_app.push()
       }
      sh "docker rmi -f \$(docker images -q)"
      slackSend channel: '#cicd', color: '#4682B4', message: "${JOB_NAME} - #${BUILD_NUMBER} Image_classfication => Build/Push", teamDomain: 'k8sproject5', tokenCredentialId: 'kakaonibs-slack'
    }
   
  } catch (e) {
    echo "Failed: ${e}"
    slackSend channel: '#jenkins_noti', color: '#FF0000', message: "${JOB_NAME} - #${BUILD_NUMBER} Build Error", teamDomain: 'k8sproject5', tokenCredentialId: 'slack-token'
  }
}

